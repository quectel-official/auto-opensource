diff --git a/ubifs-utils/mkfs.ubifs/mkfs.ubifs.c b/ubifs-utils/mkfs.ubifs/mkfs.ubifs.c
index 9e69a4f..5342e4d 100644
--- a/ubifs-utils/mkfs.ubifs/mkfs.ubifs.c
+++ b/ubifs-utils/mkfs.ubifs/mkfs.ubifs.c
@@ -29,6 +29,10 @@
 #ifndef WITHOUT_XATTR
 #include <sys/xattr.h>
 #endif
+/*header file for selinux*/
+#include <selinux/selinux.h> //add for selinux
+#include <selinux/label.h> //add for selinux
+#define XATTR_NAME_SELINUX "security.selinux" //xattr for security selinux
 
 /* Size (prime number) of hash table for link counting */
 #define HASH_TABLE_SIZE 10099
@@ -138,7 +142,12 @@ static struct inum_mapping **hash_table;
 /* Inode creation sequence number */
 static unsigned long long creat_sqnum;
 
-static const char *optstring = "d:r:m:o:D:yh?vVe:c:g:f:Fp:k:x:X:j:R:l:j:UQqa";
+/* selinux */
+static struct selabel_handle *sehnd = NULL;//selinux handler
+static char *secontext = NULL; //selinux file security contexts
+static struct stat context_st;
+static char *contextfile = NULL;
+static const char *optstring = "d:r:m:o:D:yh?vVe:c:g:f:Fp:k:x:X:j:R:l:j:UQqas:";
 
 static const struct option longopts[] = {
 	{"root",               1, NULL, 'r'},
@@ -163,6 +172,7 @@ static const struct option longopts[] = {
 	{"orph-lebs",          1, NULL, 'p'},
 	{"squash-uids" ,       0, NULL, 'U'},
 	{"set-inode-attr",     0, NULL, 'a'},
+	{"selinux",            1, NULL, 's'},
 	{NULL, 0, NULL, 0}
 };
 
@@ -206,6 +216,7 @@ static const char *helptext =
 "-a, --set-inum-attr      create user.image-inode-number extended attribute on files\n"
 "                         added to the image. The attribute will contain the inode\n"
 "                         number the file has in the generated image.\n"
+"-s,--selinux=file        SElinux file contexts\n"
 "-h, --help               display this help text\n\n"
 "Note, SIZE is specified in bytes, but it may also be specified in Kilobytes,\n"
 "Megabytes, and Gigabytes if a KiB, MiB, or GiB suffix is used.\n\n"
@@ -638,6 +649,11 @@ static int get_options(int argc, char**argv)
 		case 'a':
 			do_create_inum_attr = 1;
 			break;
+        case 's':
+            contextfile = strdup(optarg);
+            if (stat(contextfile, &context_st))
+                return err_msg("bad file contextfile\n");
+            break;
 
 		}
 	}
@@ -1126,6 +1142,35 @@ static int inode_add_xattr(struct ubifs_ino_node *host_ino,
 	ssize_t len;
 	ssize_t pos = 0;
 
+	if (contextfile != NULL)
+    {
+        char *sepath = NULL;
+        unsigned int secontext_len;
+        if (path_name[0] == '/')
+            sepath = strdup(&path_name[strlen(root)-1]);
+        else if (asprintf(&sepath, "/%s", &path_name[strlen(root)]) < 0)
+            return sys_err_msg("get sepath error\n");
+        if (selabel_lookup(sehnd, &secontext, sepath, st->st_mode) < 0)
+        {
+            secontext = strdup("u:object_r:default_t");
+        }
+
+        nm.name = strdup(XATTR_NAME_SELINUX);
+        nm.len = strlen(nm.name);
+        printf("pathname:%s name:%s secontext:%s\n",sepath, nm.name, secontext);
+        secontext_len = strlen(secontext)+1;
+        host_ino->xattr_cnt++;
+        host_ino->xattr_size += CALC_DENT_SIZE(nm.len);
+        host_ino->xattr_size += CALC_XATTR_BYTES(secontext_len);
+        host_ino->xattr_names += nm.len;
+
+        ret = add_xattr(st, inum, secontext, secontext_len, &nm);
+        if (ret < 0)
+            printf("add xattr error\n");
+        free(sepath);
+        free(secontext);
+        secontext = NULL;
+    }
 	len = llistxattr(path_name, NULL, 0);
 	if (len < 0) {
 		if (errno == ENOENT)
@@ -1177,6 +1222,11 @@ static int inode_add_xattr(struct ubifs_ino_node *host_ino,
 
 			continue;
 		}
+        if (!strcmp(name,"security.selinux"))
+        {
+            printf("skip name:%s context:%s\n",name, attrbuf);
+            continue;
+        }
 
 		nm.name = name;
 		nm.len = strlen(name);
@@ -2400,6 +2450,13 @@ static int init(void)
 	if (err)
 		return err;
 
+    if (contextfile != NULL)
+    {
+        struct selinux_opt seopt[] = {
+            { SELABEL_OPT_PATH, contextfile }
+        };
+        sehnd = selabel_open(SELABEL_CTX_FILE, seopt, 1);
+    }
 	return 0;
 }
 
@@ -2433,6 +2490,11 @@ static void deinit(void)
 	free(hash_table);
 	destroy_compression();
 	free_devtable_info();
+    if (sehnd != NULL)
+    {
+        selabel_close(sehnd);
+        sehnd = NULL;
+    }
 }
 
 /**
